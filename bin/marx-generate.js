'use strict';

const fs     = require('fs');
const tpl    = require('./util/tpl');
const path   = require('path');
const chalk  = require('chalk');
const string = require('./util/string');

const log = console.log;
const cwd = process.cwd();

const info       = text => log(chalk.green(`\n${text}\n`));
const remind     = text => log(chalk.red(`\n${text}\n`));
const append     = (fileData, data) => fileData.indexOf(data) === -1 ? fileData + data : fileData;
const showErr    = err => err && log(chalk.red(err));
const jsonFormat = json => JSON.stringify(json, null, '  ');

const MARX_JSON_HEADER = '/* DO NOT EDIT THIS FILE!!! */\n';
const MARX_JSON_PATH   = path.resolve(cwd, 'marx.json');

const createDir = (name) => {
  remind('Running create new module directories...');

  tpl.createDir(cwd, [
    `client/js/src/${name}`,
    `client/js/src/${name}/components`,
    `client/js/src/${name}/style`,
  ]);
};

const createTemplate = (name, splitName, params) => {
  remind('Running generate template files...');

  tpl.createTemplate(cwd, {
    './template/controller.js.template': `server/controller/${name}Controller.js`,
    './template/service.js.template'   : `server/service/${name}Service.js`,
    './template/model.js.template'     : `server/model/${name}.js`,
    './template/view.html.template'    : `server/view/${name}.html`,
    './template/main.js.template'      : `client/js/src/${splitName}/main.js`,
    './template/View.jsx.template'     : `client/js/src/${splitName}/components/View.jsx`,
    './template/base.scss.template'    : `client/js/src/${splitName}/style/${splitName}.scss`,
  }, params);
};

const getMarxJson    = () => JSON.parse(fs.readFileSync(MARX_JSON_PATH, 'utf8').replace(MARX_JSON_HEADER, ''));
const updateMarxJson = json => fs.writeFile(MARX_JSON_PATH, append(MARX_JSON_HEADER, jsonFormat(json), showErr));

const modelIndexFile = (models) => {
  const targetPath   = path.resolve(cwd, 'server/model/index.js');
  const templatePath = path.resolve(__dirname, './template/model.index.js.template');

  // old index file data
  const targetFile   = fs.readFileSync(targetPath, 'utf8');
  const templateFile = fs.readFileSync(templatePath, 'utf8');

  // update model index file
  const FIX_POSITION = '\n\nconst Models = {};\n\n';
  const EXPORT_TAIL  = '\nexport { sequelize, redis, Models };\n';

  const importString = models.map(model => tpl.parseTpl(templateFile, { ModelName: model }));

  const newModelFile =
    targetFile.substring(0, targetFile.indexOf(FIX_POSITION) - 1) +
    FIX_POSITION +
    importString.join('') +
    EXPORT_TAIL;

  fs.writeFile(targetPath, newModelFile, showErr);
}

const updateModelIndex = (name) => {
  // update marx.json models property
  const marxJson = getMarxJson();

  marxJson.models = marxJson.models || [];
  if (marxJson.models.indexOf(name) < 0) {
    marxJson.models.push(name);
  }

  updateMarxJson(marxJson);
  modelIndexFile(marxJson.models);
};

const generateModule = (name) => {
  if (string.isCamelStyle(name)) {
    remind('Module name should be camel style.');
    return;
  }

  const splitName = string.camelToSplitName(name);
  const params = {
    ModelName: name,
    ModelNameLowerCase: splitName
  };

  createDir(splitName);
  createTemplate(name, splitName, params)

  updateModelIndex(name);
};

const generate = (type, name) => {
  switch (type) {
    case 'module':
      generateModule(name);
      break;
    case 'test':
      break;
    default:
      remind(`"${type}" is not valid type, only support module and test.`);
  }
};

module.exports = generate;
